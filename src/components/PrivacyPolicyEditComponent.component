<apex:component controller="PageMessaging">
    <apex:attribute name="theArtifact" description="The artifacts to display in the Privacy Policy" type="Artifact__c" required="true" />
    <apex:attribute name="cancelMethod" description="The cancel method from the parent controller" type="ApexPages.Action" required="true"/>

    <apex:outputPanel styleClass="row pad-zero">
        <apex:pageMessages id="pm" />
        <apex:outputPanel layout="block" styleClass="col-md-7 pad-left-zero" >
            <strong>*Privacy Policy Name</strong><br />
            <apex:inputfield styleClass="required_75" id="Name" value="{!theArtifact.name}" required="true" >
                <apex:actionSupport event="onchange" oncomplete="validateField(this);" reRender="none" />
            </apex:inputfield>
        </apex:outputPanel>

        <apex:outputPanel layout="block" styleClass="col-md-4 pad-right-zero pull-right"><br/>
            <apex:inputCheckbox id="IsCurrent" value="{!theArtifact.isCurrent__c}" /> Is this Policy current?
        </apex:outputPanel>
    </apex:outputPanel>

    <apex:outputPanel styleClass="row pad-zero">
        <apex:outputpanel layout="block" styleClass="col-md-7 pad-left-zero">
            <strong>*Covered Data</strong><br />
            <apex:inputfield styleClass="required_75" id="Type" required="true" value="{!theArtifact.Type__c}" >
                <apex:actionSupport event="onchange" oncomplete="validateField(this);" reRender="none" />
            </apex:inputfield>
        </apex:outputpanel>

        <apex:outputPanel layout="block" styleClass="col-md-4 pad-right-zero">
            <strong>*Effective Date</strong><br />
            <apex:outputPanel layout="block" styleClass="hideCurrDate">
                <apex:inputField styleClass="required_75" id="Effective_Date" value="{!theArtifact.Effective_Date__c}" required="true" >
                    <apex:actionSupport event="onchange" oncomplete="validateField(this);" reRender="none" />
                </apex:inputField>
            </apex:outputPanel>
        </apex:outputPanel>
    </apex:outputPanel>

    <apex:outputPanel id="TypeText" layout="block" styleClass="col-md-12 pad-left-zero pad-right-zero widthFull">
        <strong>*Description</strong><br />
        <apex:inputfield id="Description" value="{!theArtifact.Description__c}" required="true" styleClass="widthFull required_75" >
            <apex:actionSupport event="onchange" oncomplete="validateField(this);" reRender="none" />
        </apex:inputfield>
    </apex:outputPanel>
<br/>
    <apex:outputPanel layout="block" styleClass="col-md-12 pad-left-zero pad-right-zero widthFull"><br/>
        Please add a link to a public URL or upload a copy of your privacy policy.<br/> 
        <apex:outputPanel layout="block" styleClass="col-md-10 pad-left-zero pad-right-zero"  >
            <strong>Public URL</strong><br />
            <apex:inputfield id="External_Artifact_URL" value="{!theArtifact.External_Artifact_URL__c}" >
                <apex:actionSupport event="onchange" oncomplete="validateField(this);" reRender="none" />
            </apex:inputfield>
        </apex:outputPanel>
        <br/>
        <apex:outputPanel layout="block" styleClass="col-md-12 pad-left-zero pad-right-zero"> 
            OR 
        </apex:outputPanel>
        <apex:outputPanel layout="block" styleClass="col-md-12 pad-left-zero pad-right-zero"  >
            <input type="file" id="uploadThisFile" onchange="validateFile();" />
            <small>File size limit: 10mb</small>
            <br/><br/>
        </apex:outputPanel>
    </apex:outputPanel>
    <br/><br/>
    <apex:outputPanel layout="block" styleClass="col-md-12 pad-left-zero pad-right-zero" >
        <apex:commandLink action="{!cancelMethod}" styleClass="btn btn-gray btn-sm" reRender="ArtifactPanel" value="Cancel" immediate="true" />&nbsp;
        <!-- TODO fix buttons with padding correctly instead of have a &nbsp; -->
        <apex:commandLink onclick="saveWithConnectionJs();" styleClass="btn btn-gray btn-sm"  value="Save" reRender="pm, nextBtn70, emptyNextBtn70, errorBar70" />
    </apex:outputPanel>
            <!-- method for saving the artifact with or without an attachment ... Pass in the name, body, etc from the input file field --> 
            <!-- removing due to 3MB limit
            <apex:actionFunction name="save" reRender="pm, ArtifactPanel" action="{!saveMethod}">
                <apex:param name="attachmentName" value="" />
                <apex:param name="attachmentContentType" value="" />
                <apex:param name="attachmentBody" value="" />
                <apex:param name="attachmentDescription" value="" />
            </apex:actionFunction>
            -->
        <apex:outputPanel id="LoadingDiv" styleClass="initiallyHidden">
            <apex:outputPanel layout="block" styleClass="loading-div" >
            </apex:outputPanel>
            <apex:outputPanel layout="block" styleClass="loading-div2">
                <apex:outputPanel layout="block" styleClass="loading-div3">
                    <img src="/img/loading.gif" class="loading-div-img" />
                    <apex:outputText styleClass="loading-div-text" value="Saving..." />
                </apex:outputPanel>
            </apex:outputPanel>
        </apex:outputPanel>
            <apex:actionFunction name="addMessage" action="{!addMessage}" reRender="pm" >
                <apex:param name="severity" assignTo="{!severity}" value="" />
                <apex:param name="message" assignTo="{!message}" value="" />
            </apex:actionFunction>

            

            <apex:actionFunction name="cancel" reRender="pm, ArtifactPanel" action="{!cancelMethod}">
            </apex:actionFunction>
            <!-- utilizing the connection.js for the base64binary funtion -->
            <apex:includeScript value="/soap/ajax/35.0/connection.js"/>
            <apex:outputPanel id="cScriptPanel">
                <script type="text/javascript">
                        //global javascript variables
                        
                        function validateFile(){ //method used for validating the attachment
                            if(document.getElementById('uploadThisFile') != null && document.getElementById('uploadThisFile').files != null && document.getElementById('uploadThisFile').files[0] != undefined) { 
                                var attachFile = document.getElementById('uploadThisFile').files[0]; //read file from input field
                                                        
                                if(attachFile.size > 10485760){  //Where 10485760 is byte equivalent of 10MB
                                    document.getElementById('uploadThisFile').files[0] = null;
                                    addMessage('Warning', 'Attachment is too large. Please upload a file less than 10MB.');
                                    return false;
                                }
                                return true;
                            }
                            return false;
                        }
                        //this function parses the attachment to a string for consumption by the controller and saves it -Removing due to 3MB limit
                       /* function saveWithAttachment(){
                            var name, contentType, description, body;
                            if(validateFile()) { 
                                var attachFile = document.getElementById('uploadThisFile').files[0]; //read file from input field
                                var reader = new FileReader();
                                reader.onload = function(e) {
                                    // if the value is undefined or null, set it to empty string or else it will blow up the action function it is calling
                                    name = attachFile.name ? attachFile.name : '';
                                    contentType = attachFile.type ? attachFile.type : '';
                                    body = new sforce.Base64Binary(e.target.result).toString() ? new sforce.Base64Binary(e.target.result).toString() : '';
                                    description = attachFile.description ? attachFile.description : '';
                                    save(name.toString(), contentType.toString(), body.toString(), description.toString());
                                };
                                reader.readAsBinaryString(attachFile); //read the file
                            } else {
                                name = '';
                                contentType = '';
                                description = '';
                                body = '';
                                save(name.toString(), contentType.toString(), body.toString(), description.toString());
                            }
                        }*/
                        function displayProcessing() {
                            //TODO - speficy parameter to clear or rely on toggle?
                            $(document.getElementById('{!$Component.LoadingDiv}')).removeClass('initiallyHidden');

                        }
                        function clearProcessing() {
                            //TODO - speficy parameter to clear or rely on toggle?
                            $(document.getElementById('{!$Component.LoadingDiv}')).addClass('initiallyHidden');
                        }
                        function saveWithConnectionJs() {
                            
                                var name, contentType, description, body;
                                var recordID, artifactResult, artifact, attachFile, name, attachFile;
                                sforce.connection.sessionId = "{!$Api.Session_ID}";

                                if(!validate('75')) {return;} //validate all fields
                                if(validateFile()) { //validate the attachment is uploaded or the public url is populated
                                    var attachFile = document.getElementById('uploadThisFile').files[0];
                                    name = attachFile.name ? attachFile.name : '';
                                    if(name == '') {
                                        addMessage('Info', 'You must add a link to a public URL or upload a copy of your privacy policy');
                                        return;
                                    }
                                } else {

                                    if(!document.getElementById('{!$Component.External_Artifact_URL}').value){
                                        addMessage('Info', 'You must add a link to a public URL or upload a copy of your privacy policy');
                                        return;
                                    }
                                }
                                displayProcessing(); //pop up a processing div
                                //create the artifact and insert it
                                try {
                                    artifact = new sforce.SObject('Artifact__c');
                                    artifact.name = document.getElementById('{!$Component.Name}').value;
                                    artifact.isCurrent__c = document.getElementById('{!$Component.IsCurrent}').checked ? true : false;
                                    artifact.Type__c = document.getElementById('{!$Component.Type}').value;
                                    artifact.Effective_Date__c =  new Date(document.getElementById('{!$Component.Effective_Date}').value);
                                    artifact.Description__c = document.getElementById('{!$Component.Description}').value;
                                    artifact.External_Artifact_URL__c = document.getElementById('{!$Component.External_Artifact_URL}').value;
                                    
                                    if(!!'{!theArtifact.Id}') {
                                        artifact.Id = '{!theArtifact.Id}';
                                        artifactResult = sforce.connection.update([artifact]);
                                    } else {
                                        artifact.Participation_Number__c = '{!theArtifact.Participation_Number__c}';
                                        artifactResult = sforce.connection.create([artifact]);
                                    }
                                } catch (err) {
                                    addMessage('Error', 'Unable to save policy.');
                                    return false;
                                }
                                //TODO - validate all fields are populated correctly
                                if(artifactResult[0].getBoolean('success')) {
                                    recordID = artifactResult[0].id;
                                    if(validateFile()) {
                                        attachFile = document.getElementById('uploadThisFile').files[0];
                                        name = attachFile.name ? attachFile.name : '';
                                    }
                                    
                                    console.debug(recordID);
                                    if(attachFile) { 
                                        var reader = new FileReader();

                                        if(attachFile.size > 26214400){  //Where 26214400 is byte equivalent of 25MB
                                            alert('Attachment size not supported');
                                        }

                                        reader.onload = function(e) {
                                            var attachment = new sforce.SObject('Attachment');  
                                            attachment.Name = attachFile.name ? attachFile.name : '';
                                            attachment.ContentType = attachFile.type ? attachFile.type : '';
                                            attachment.Body = (new sforce.Base64Binary(e.target.result)).toString() ? (new sforce.Base64Binary(e.target.result)).toString() : '';
                                            attachment.Description = attachFile.name ? attachFile.name : '';
                                            attachment.ParentId = recordID ? recordID : '';
                                            var result = sforce.connection.create([attachment]);
                                            if(result[0].getBoolean("success")){
                                                clearProcessing();
                                                cancel();//close and rerender
                                            }else{
                                                clearProcessing();
                                                //TODO handle messaging
                                            }
                                        };
                                        reader.readAsBinaryString(attachFile);
                                    } else {
                                        clearProcessing(); //remove processing div
                                        cancel();//close and rerender
                                    }
                                } else {
                                    addMessage('Error', 'Unable to save this policy.');
                                    clearProcessing(); //remove processing div
                                    //TODO handle messaging
                                }
                        }
                        
                        //A validation function like this would be good, but there are hidden fields rendered constantly... e.g. the submit form
                        function validateForm() {
                            var valid = true;
                            $('[required]').each(function() {
                                if(!this.value) {
                                    valid = false; 
                                    $(this).addClass('has-error');
                                } else {
                                    if($(this).hasClass('has-error')) {
                                        $(this).removeClass('has-error');
                                    }
                                }
                            });
                            return valid;
                        }
                    </script>
            </apex:outputPanel>
</apex:component>