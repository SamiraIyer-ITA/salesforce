@IsTest
private class EventProductCodeGeneratorTest {

	// We need to get the current index one value from the class as it's dynamic
	static String indexOneValue = EventProductCodeGenerator.getIndexOneValue();
	static Set<String> filters = new Set<String>{ '%' + indexOneValue + 'N__'  };

	// We need to serialize a Map into a Product to set the formula field so it can be read
	static Product2 getMockProduct(String family, String fxEventTypeSmartCode) {
		Map<String, Object> data = new Map<String, Object> {
			'Product2' => new Map<String, Object>{
				'Name' 						=> 'Test ' + family,
				'Family' 					=> family,
				'Event_Type_Smart_Code__c'	=> fxEventTypeSmartCode,
                'RecordTypeId'				=> EventProductCodeGenerator.EVENT_RECORD_TYPE_ID
			 }
		};
		return (Product2)JSON.deserialize(JSON.serialize(data), Product2.class);
	}

	@IsTest
	static void testSetProductCodes_FirstInstance() {
		String expectedNextProductCode = indexOneValue + 'N01';
		fflib_ApexMocks mocks = new fflib_ApexMocks();
		ProductsSelector mocksSelector = (ProductsSelector) mocks.mock(ProductsSelector.class);
		AggregateResultProxy[] mockedGroupedResults = new List<AggregateResultProxy> {
		   new AggregateResultProxy()
			 .withAliasAndValue('Family','Certified Trade Mission')
			 .withAliasAndValue('maxSmartCode', null)
		};
		mocks.startStubbing();
		List<Product2> testProducts = new List<Product2>{ getMockProduct('Certified Trade Mission', 'N') };
		mocks.when(mocksSelector.sObjectType()).thenReturn(Product2.SObjectType);
		mocks.when(mocksSelector.selectMaxProductCodesByFamily(filters)).thenReturn(mockedGroupedResults);
		mocks.stopStubbing();
		fflibext_Application.Selector.setMock(mocksSelector);
		IProductCodeGenerator codeGenerator
			= (IProductCodeGenerator) di_Injector.Org.getInstance(EventProductCodeGenerator.class);
		codeGenerator.setProductCodes(testProducts);
		System.assertEquals(expectedNextProductCode, testProducts[0].ProductCode,
			'Verify product code is first instance.');
	}

	@IsTest
	static void testSetProductCodes_NextIncrement() {
		String maxSmartCode = indexOneValue + 'NAB';
		String expectedNextProductCode = indexOneValue + 'NAC';
		fflib_ApexMocks mocks = new fflib_ApexMocks();
		ProductsSelector mocksSelector = (ProductsSelector) mocks.mock(ProductsSelector.class);
		AggregateResultProxy[] mockedGroupedResults = new List<AggregateResultProxy> {
		   new AggregateResultProxy()
			 .withAliasAndValue('Family','Certified Trade Mission')
			 .withAliasAndValue('maxSmartCode', maxSmartCode)
		};
		mocks.startStubbing();
		List<Product2> testProducts = new List<Product2>{ getMockProduct('Certified Trade Mission', 'N') };
		mocks.when(mocksSelector.sObjectType()).thenReturn(Product2.SObjectType);
		mocks.when(mocksSelector.selectMaxProductCodesByFamily(filters)).thenReturn(mockedGroupedResults);
		mocks.stopStubbing();
		fflibext_Application.Selector.setMock(mocksSelector);
		IProductCodeGenerator codeGenerator
			= (IProductCodeGenerator) di_Injector.Org.getInstance(EventProductCodeGenerator.class);
		codeGenerator.setProductCodes(testProducts);
		System.assertEquals(expectedNextProductCode, testProducts[0].ProductCode,
			'Verify product code is next in order.');
	}

	@IsTest
	static void testSetProductCodes_IncrementThirdIndex() {
		String maxSmartCode = indexOneValue + 'N0Z';
		String expectedNextProductCode = indexOneValue + 'N10';
		fflib_ApexMocks mocks = new fflib_ApexMocks();
		ProductsSelector mocksSelector = (ProductsSelector) mocks.mock(ProductsSelector.class);
		AggregateResultProxy[] mockedGroupedResults = new List<AggregateResultProxy> {
		   new AggregateResultProxy()
			 .withAliasAndValue('Family','Certified Trade Mission')
			 .withAliasAndValue('maxSmartCode', maxSmartCode)
		};
		mocks.startStubbing();
		List<Product2> testProducts = new List<Product2>{ getMockProduct('Certified Trade Mission', 'N') };
		mocks.when(mocksSelector.sObjectType()).thenReturn(Product2.SObjectType);
		mocks.when(mocksSelector.selectMaxProductCodesByFamily(filters)).thenReturn(mockedGroupedResults);
		mocks.stopStubbing();
		fflibext_Application.Selector.setMock(mocksSelector);
		IProductCodeGenerator codeGenerator
			= (IProductCodeGenerator) di_Injector.Org.getInstance(EventProductCodeGenerator.class);
		codeGenerator.setProductCodes(testProducts);
		System.assertEquals(expectedNextProductCode, testProducts[0].ProductCode,
			'Verify the third index of the product code was incremented.');
	}

	@IsTest
	static void testSetProductCodes_MaxSmartCodeIndex() {
		String maxSmartCode = indexOneValue + 'NZZ';
		String expectedExceptionMessage
			= EventProductCodeGenerator.getMaxSmartCodeIndexErrorMessage(indexOneValue + 'NZZ', indexOneValue + 'N');
		fflib_ApexMocks mocks = new fflib_ApexMocks();
		ProductsSelector mocksSelector = (ProductsSelector) mocks.mock(ProductsSelector.class);
		AggregateResultProxy[] mockedGroupedResults = new List<AggregateResultProxy> {
		   new AggregateResultProxy()
			 .withAliasAndValue('Family','Certified Trade Mission')
			 .withAliasAndValue('maxSmartCode', maxSmartCode)
		};
		mocks.startStubbing();
		List<Product2> testProducts = new List<Product2>{ getMockProduct('Certified Trade Mission', 'N') };
		mocks.when(mocksSelector.sObjectType()).thenReturn(Product2.SObjectType);
		mocks.when(mocksSelector.selectMaxProductCodesByFamily(filters)).thenReturn(mockedGroupedResults);
		mocks.stopStubbing();
		fflibext_Application.Selector.setMock(mocksSelector);
		IProductCodeGenerator codeGenerator
			= (IProductCodeGenerator) di_Injector.Org.getInstance(EventProductCodeGenerator.class);
		try {
		   codeGenerator.setProductCodes(testProducts);
		} catch (Exception e) {
			System.assertEquals(expectedExceptionMessage, e.getMessage(),
				'Verify exception was thrown due to max product code.');
		}
	}

	@IsTest
	static void testGetIndexOneValue_FiscalMonthLessThanNine() {
		EventProductCodeGenerator.fiscalYear = '2020';
		EventProductCodeGenerator.fiscalMonth = 8;
		System.assertEquals('0', EventProductCodeGenerator.getIndexOneValue());
	}

	@IsTest
	static void testGetIndexOneValue_FiscalMonthGreaterThanNine() {
		EventProductCodeGenerator.fiscalYear = '2020';
		EventProductCodeGenerator.fiscalMonth = 11;
		System.assertEquals('1', EventProductCodeGenerator.getIndexOneValue());
	}

	@IsTest
	static void testGetIndexOneValue_FiscalYearNine_FiscalMonthGreaterThanNine() {
		EventProductCodeGenerator.fiscalYear = '2019';
		EventProductCodeGenerator.fiscalMonth = 11;
		System.assertEquals('0', EventProductCodeGenerator.getIndexOneValue());
	}
}