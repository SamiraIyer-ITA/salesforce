<project name="mm-base-functions-library"
    xmlns:sf="antlib:com.salesforce">

    <property environment="env" />

    <path id="lib.classpath">
        <fileset dir="." />
    </path>


    <!-- Salesforce ANT jar -->
    <property name="salesforce.ant.jar.filepath" value="${lib.dir}/ant-salesforce-43.0.jar" />

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="${salesforce.ant.jar.filepath}" />
        </classpath>
    </taskdef>

    <!-- ANT Contrib Tasks jar -->
    <property name="ant.contrib.jar.filepath" value="${lib.dir}/ant-contrib-1.0b3.jar" />

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant.contrib.jar.filepath}" />
        </classpath>
    </taskdef>

    <!-- Enhanced Salesforce ANT Migration Tool jar -->
    <taskdef name="enhancedsf-deploy"
        classname="com.salesforce.ant.DeployWithXmlReportTask"
        classpathref="lib.classpath"
    />

    <!-- classpathref="project-level-ant-tasks.classpath" -->
    <property name="build-properties-file-name" value="local.build.properties" />
    <property name="build-properties-file" value="${basedir}/${build-properties-file-name}" />

    <property file="${build-properties-file}"/>

    <target name="generate.local.properties" description="">
        <delete file="${build-properties-file}" />
        <echo></echo>
        <echo>Creating a new ${build-properties-file-name} at the project root.  Please edit the file with credentials in order to perform a deployment.</echo>
        <echo></echo>
        <echo file="${build-properties-file}" append="false"># ${build-properties-file-name}${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">#${line.separator}</echo>
        <echo file="${build-properties-file}" append="true"># Specify the login credentials for the desired Salesforce organization${line.separator}</echo>
        <echo file="${build-properties-file}" append="true"># Use 'https://www.salesforce.com' for production or developer edition (the default if not specified).${line.separator}</echo>
        <echo file="${build-properties-file}" append="true"># Use 'https://test.salesforce.com for sandbox.${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">sf.source.username=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">sf.source.password=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">sf.source.securityToken=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">sf.source.serverurl=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">org.wide.email.address=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">sf.target.username=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">sf.target.password=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">sf.target.securityToken=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">sf.target.serverurl=${line.separator}</echo>
        <echo file="${build-properties-file}" append="true">${line.separator}</echo>
    </target>

    <target name="abstract-deploy" >
        <!-- default the ignoreWarnings attribute to false -->
        <condition property="ignoreWarnings.set" else="false">
          <isset property="ignore.warnings"/>
        </condition>
        <if>
            <equals arg1="${ignoreWarnings.set}" arg2="true" />
            <then>
                <var name="the.ignore.warnings" value="${ignore.warnings}" />
            </then>
            <else>
                <var name="the.ignore.warnings" value="false" />
            </else>
        </if>

        <!-- default the testLevel attribute to false -->
        <condition property="testLevel.set" else="false">
           <isset property="testLevel"/>
        </condition>
        <if>
            <equals arg1="${testLevel.set}" arg2="true" />
            <then>
                <var name="the.test.level" value="${testLevel}" />
            </then>
            <else>
                <var name="the.test.level" value="NoTestRun" />
            </else>
        </if>

        <!-- determine if unit tests need to be saved -->
        <condition property="env.circle.test.reports.set" else="false">
          <isset property="env.CIRCLE_TEST_REPORTS"/>
        </condition>
        <if>
            <equals arg1="${env.circle.test.reports.set}" arg2="true" />
            <then>
                <delete dir="${env.CIRCLE_TEST_REPORTS}/junit" failonerror="false"/>
                <mkdir dir="${env.CIRCLE_TEST_REPORTS}/junit"/>
                <enhancedsf-deploy
                            username="${the.username}"
                            password="${the.password}${the.securityToken}"
                            serverurl="${the.serverurl}"
                            deployRoot="${working.base.dir}"
                            checkOnly="${the.checkOnly}"
                            pollWaitMillis="10000"
                            maxPoll="2000"
                            testLevel="${the.test.level}"
                            junitreportdir="${env.CIRCLE_TEST_REPORTS}/junit"
                            >
                    <!-- Run only tests with file names that match this pattern -->
                    <!--
                    Disable this section for now.  It should be enabled once ALL classes each reach a level of 75% code coverage; not just the overall org 75% code coverage.

                    <batchtest>
                        <fileset dir="src/classes">
                            <include name="*Test.cls"/>
                        </fileset>
                        <fileset dir="src/classes">
                            <contains text="@isTest" casesensitive="no"/>
                        </fileset>
                        <fileset dir="src/classes">
                            <contains text="testmethod" casesensitive="no"/>
                        </fileset>
                    </batchtest>
                    -->
                </enhancedsf-deploy>
            </then>
            <else>
                <sf:deploy username="${the.username}" password="${the.password}${the.securityToken}" serverurl="${the.serverurl}"
                    singlePackage="true"
                    deployRoot="${working.base.dir}"
                    checkOnly="${the.checkOnly}"
                    ignoreWarnings="${the.ignore.warnings}"
                    pollWaitMillis="10000" maxPoll="2000"
                    testLevel="${the.test.level}"
                />
            </else>
        </if>
    </target>

    <target name="abstract-deploy-target" depends="resolve-target-creds">

        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message="    Deploying to ${target.serverurl}" />
        <echo message="    Using credentials of ${target.username}" />
        <echo message=" ${line.separator}" />
        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message=" ${line.separator}" />

        <antcall target="abstract-deploy" inheritall="yes">
            <param name="the.username" value="${target.username}" />
            <param name="the.password" value="${target.password}" />
            <param name="the.securityToken" value="${target.securityToken}" />
            <param name="the.serverurl" value="${target.serverurl}" />
            <param name="the.checkOnly" value="false" />
        </antcall>
    </target>

    <target name="abstract-deploy-source" depends="resolve-source-creds">

        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message="    Deploying to ${source.serverurl}" />
        <echo message="    Using credentials of ${source.username}" />
        <echo message=" ${line.separator}" />
        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message=" ${line.separator}" />

        <antcall target="abstract-deploy" inheritall="yes">
            <param name="the.username" value="${source.username}" />
            <param name="the.password" value="${source.password}" />
            <param name="the.securityToken" value="${source.securityToken}" />
            <param name="the.serverurl" value="${source.serverurl}" />
            <param name="the.checkOnly" value="false" />
        </antcall>
    </target>

    <target name="abstract-retrieve" >

        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message="    Retrieving from ${source.serverurl}" />
        <echo message="    Using credentials of ${source.username}" />
        <echo message=" ${line.separator}" />
        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message=" ${line.separator}" />

        <sf:retrieve username="${the.username}" password="${the.password}${the.securityToken}" serverurl="${the.serverurl}"
            singlePackage="true" unpackaged="${working.base.dir}/package.xml" pollWaitMillis="10000" maxPoll="2000"
            retrieveTarget="${working.base.dir}"
        />
    </target>

    <target name="abstract-retrieve-target" depends="resolve-target-creds">
        <antcall target="abstract-retrieve" inheritall="yes">
            <param name="the.username" value="${target.username}" />
            <param name="the.password" value="${target.password}" />
            <param name="the.securityToken" value="${target.securityToken}" />
            <param name="the.serverurl" value="${target.serverurl}" />
        </antcall>
    </target>

    <target name="abstract-retrieve-source" depends="resolve-source-creds">
        <antcall target="abstract-retrieve" inheritall="yes">
            <param name="the.username" value="${source.username}" />
            <param name="the.password" value="${source.password}" />
            <param name="the.securityToken" value="${source.securityToken}" />
            <param name="the.serverurl" value="${source.serverurl}" />
        </antcall>
    </target>

    <target name="abstract-validate-target" depends="resolve-target-creds">

        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message="    Validating deployment to ${target.serverurl}" />
        <echo message="    Using credentials of ${target.username}" />
        <echo message=" ${line.separator}" />
        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message=" ${line.separator}" />

        <antcall target="abstract-deploy" inheritall="yes">
            <param name="the.username" value="${target.username}" />
            <param name="the.password" value="${target.password}" />
            <param name="the.securityToken" value="${target.securityToken}" />
            <param name="the.serverurl" value="${target.serverurl}" />
            <param name="the.checkOnly" value="true" />
        </antcall>
    </target>

    <target name="abstract-validate-source" depends="resolve-source-creds">

        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message="    Validating deployment to ${source.serverurl}" />
        <echo message="    Using credentials of ${source.username}" />
        <echo message=" ${line.separator}" />
        <echo message="_______________________________________________________________________________" />
        <echo message=" ${line.separator}" />
        <echo message=" ${line.separator}" />

        <antcall target="abstract-deploy" inheritall="yes">
            <param name="the.username" value="${source.username}" />
            <param name="the.password" value="${source.password}" />
            <param name="the.securityToken" value="${source.securityToken}" />
            <param name="the.serverurl" value="${source.serverurl}" />
            <param name="the.checkOnly" value="true" />
        </antcall>
    </target>

    <target name="resolve-source-creds">
        <condition property="env.source.username.set" else="false">
          <isset property="env.SF_SOURCE_USERNAME"/>
        </condition>
        <if>
            <equals arg1="${env.source.username.set}" arg2="true" />
            <then>
                <var name="source.username" value="${env.SF_SOURCE_USERNAME}" />
            </then>
            <else>
                <var name="source.username" value="${sf.source.username}" />
            </else>
        </if>

        <condition property="env.source.password.set" else="false">
          <isset property="env.SF_SOURCE_PASSWORD"/>
        </condition>
        <if>
            <equals arg1="${env.source.password.set}" arg2="true" />
            <then>
                <var name="source.password" value="${env.SF_SOURCE_PASSWORD}" />
            </then>
            <else>
                <var name="source.password" value="${sf.source.password}" />
            </else>
        </if>

        <condition property="env.source.securityToken.set" else="false">
          <isset property="env.SF_SOURCE_SECURITYTOKEN"/>
        </condition>
        <if>
            <equals arg1="${env.source.securityToken.set}" arg2="true" />
            <then>
                <var name="source.securityToken" value="${env.SF_SOURCE_SECURITYTOKEN}" />
            </then>
            <else>
                <var name="source.securityToken" value="${sf.source.securityToken}" />
            </else>
        </if>

        <condition property="env.source.serverurl.set" else="false">
          <isset property="env.SF_SOURCE_PASSWORD"/>
        </condition>
        <if>
            <equals arg1="${env.source.serverurl.set}" arg2="true" />
            <then>
                <var name="source.serverurl" value="${env.SF_SOURCE_SERVERURL}" />
            </then>
            <else>
                <var name="source.serverurl" value="${sf.source.serverurl}" />
            </else>
        </if>
    </target>

    <target name="resolve-target-creds">
        <condition property="env.target.username.set" else="false">
          <isset property="env.SF_TARGET_USERNAME"/>
        </condition>
        <if>
            <equals arg1="${env.target.username.set}" arg2="true" />
            <then>
                <var name="target.username" value="${env.SF_TARGET_USERNAME}" />
            </then>
            <else>
                <var name="target.username" value="${sf.target.username}" />
            </else>
        </if>

        <condition property="env.target.password.set" else="false">
          <isset property="env.SF_TARGET_PASSWORD"/>
        </condition>
        <if>
            <equals arg1="${env.target.password.set}" arg2="true" />
            <then>
                <var name="target.password" value="${env.SF_TARGET_PASSWORD}" />
            </then>
            <else>
                <var name="target.password" value="${sf.target.password}" />
            </else>
        </if>

        <condition property="env.target.securityToken.set" else="false">
          <isset property="env.SF_TARGET_SECURITYTOKEN"/>
        </condition>
        <if>
            <equals arg1="${env.target.securityToken.set}" arg2="true" />
            <then>
                <var name="target.securityToken" value="${env.SF_TARGET_SECURITYTOKEN}" />
            </then>
            <else>
                <var name="target.securityToken" value="${sf.target.securityToken}" />
            </else>
        </if>

        <condition property="env.target.serverurl.set" else="false">
          <isset property="env.SF_TARGET_PASSWORD"/>
        </condition>
        <if>
            <equals arg1="${env.target.serverurl.set}" arg2="true" />
            <then>
                <var name="target.serverurl" value="${env.SF_TARGET_SERVERURL}" />
            </then>
            <else>
                <var name="target.serverurl" value="${sf.target.serverurl}" />
            </else>
        </if>
    </target>

</project>