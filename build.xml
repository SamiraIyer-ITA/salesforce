<project name="mm-security-change-for-intake-client"
    xmlns:sf="antlib:com.salesforce">

    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="mocks.config.dir" value="${basedir}/mocks-config"/>
    <property name="main.src.dir" value="${basedir}/src"/>
    <property name="resource-bundle.src.dir" value="${basedir}/resource-bundles"/>

    <import file="${lib.dir}/base-functions.xml"/>

    <property name="build.target.dir" value="${basedir}/target" />
    <property name="deployment.root.dir" value="${build.target.dir}/src" />
    <property name="flows.working.dir" value="${build.target.dir}/flows-working" />
    <property name="flow-definitions.working.dir" value="${build.target.dir}/flow-definitions-working" />

    <property name="flows-src-dir.name" value="src-flows" />
    <property name="flows-src.dir" value="${basedir}/${flows-src-dir.name}" />

    <property name="destructive-changes-folder-name" value="src-metadata-deletes" />

    <target name="activate-all-flows-from-source-in-target">

        <antcall target="prepare-to-activate-all-flows-from-source-in-target"/>

        <!-- deploy these flowDefinitions back to the target org -->
        <antcall target="abstract-deploy-target">
            <param name="working.base.dir" value="${flow-definitions.working.dir}"/>
        </antcall>

    </target>

    <target name="create-package-xml-with-flows">
        <copy file="${lib.dir}/blank.package.xml" tofile="${working.base.dir}/package.xml"/>

        <!-- add the entry to the build target package.xml for Flow -->
        <replaceregexp flags="g">
            <regexp pattern="&gt;(\s*)(&lt;version&gt;)"/>
            <substitution expression="&gt;\1&lt;types>\1    &lt;members&gt;\*&lt;/members&gt;\1    &lt;name&gt;Flow&lt;/name&gt;\1&lt;/types&gt;\1\2"/>
            <fileset dir="${working.base.dir}">
                  <include name="package.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="create-package-xml-with-flowDefinitions">
        <copy file="${lib.dir}/blank.package.xml" tofile="${working.base.dir}/package.xml"/>

        <!-- add the entry to the build target package.xml for Flow -->
        <replaceregexp flags="g">
            <regexp pattern="&gt;(\s*)(&lt;version&gt;)"/>
            <substitution expression="&gt;\1&lt;types>\1    &lt;members&gt;\*&lt;/members&gt;\1    &lt;name&gt;FlowDefinition&lt;/name&gt;\1&lt;/types&gt;\1\2"/>
            <fileset dir="${working.base.dir}">
                  <include name="package.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="deactivate-all-flows-in-target">

        <property name="temp.build.target.dir" value="${build.target.dir}/temp" />

        <delete dir="${flow-definitions.working.dir}" failonerror="false"/>
        <mkdir dir="${flow-definitions.working.dir}"/>

        <!-- retrieve all flows from target -->
        <delete dir="${temp.build.target.dir}" failonerror="false"/>
        <mkdir dir="${temp.build.target.dir}"/>

        <antcall target="create-package-xml-with-flowDefinitions">
            <param name="working.base.dir" value="${temp.build.target.dir}"/>
        </antcall>

        <antcall target="abstract-retrieve-target">
            <param name="working.base.dir" value="${temp.build.target.dir}"/>
        </antcall>

        <!-- work with only the flows that have an active version -->
        <fileset id="matches" dir="${temp.build.target.dir}/flowDefinitions">
            <patternset>
                <include name="*.flowDefinition" />
            </patternset>
            <contains text="activeVersionNumber" />
        </fileset>

        <copy todir="${flow-definitions.working.dir}/flowDefinitions">
            <fileset refid="matches"/>
        </copy>

        <antcall target="create-package-xml-with-flowDefinitions">
            <param name="working.base.dir" value="${flow-definitions.working.dir}"/>
        </antcall>

        <antcall target="remove-exceptions" >
            <param name="working.base.dir" value="${flow-definitions.working.dir}"/>
        </antcall>

        <!-- remove the activeVersionNumber designation so that all of the flows are deactivated -->
        <replaceregexp flags="gm">
            <regexp pattern="&gt;\s*&lt;activeVersionNumber&gt;\S*&lt;/activeVersionNumber&gt;(\s*)&lt;"/>
            <substitution expression="&gt;\1&lt;"/>
            <fileset dir="${flow-definitions.working.dir}/flowDefinitions">
                <include name="*.flowDefinition"/>
            </fileset>
        </replaceregexp>

        <!-- deploy these flowDefinitions back to the target org -->
        <antcall target="abstract-deploy-target">
            <param name="working.base.dir" value="${flow-definitions.working.dir}"/>
        </antcall>

    </target>

    <target name="deploy-main-code-to-target" description="Validates the deployment of code base in /src and /src-flows directory">

        <antcall target="prepare-main-code-deployment" />

        <antcall target="abstract-deploy-target">
            <param name="working.base.dir" value="${deployment.root.dir}" />
        </antcall>

    </target>

    <target name="deploy-flows-only-to-target" description="Validates the deployment of code base in /src and /src-flows directory">

        <delete dir="${deployment.root.dir}" failonerror="false"/>
        <mkdir dir="${deployment.root.dir}"/>

        <antcall target="create-package-xml-with-flows">
            <param name="working.base.dir" value="${deployment.root.dir}"/>
        </antcall>

        <antcall target="prepare-flows-for-deployment" >
            <param name="the-working-directory" value="${deployment.root.dir}"/>
        </antcall>

        <antcall target="abstract-deploy-target">
            <param name="working.base.dir" value="${deployment.root.dir}" />
        </antcall>

    </target>

    <target name="deploy-src" description="Deploys the reports and dashbaords from the src package">
        <antcall target="abstract-deploy-source">
            <param name="working.base.dir" value="${main.src.dir}" />
            <param name="testLevel" value="NoTestRun" />
            <!-- NoTestRun, RunSpecifiedTests, RunLocalTests, RunAllTestsInOrg -->
        </antcall>
    </target>

    <target name="generate-mocks" description="Iterate through mock class definition files.">
        <foreach target="generate-mockfile" param="mock.property.filename">
            <path>
                <fileset dir="${mocks.config.dir}" includes="*.properties" />
            </path>
        </foreach>
    </target>

    <target name="generate-mockfile" description="Creates the mock classes file.">
        <propertyregex property="currentDefFileName.part0" input="${mock.property.filename}" regexp=".*/(.*).properties" select="\1" />
        <touch file="${main.src.dir}/classes/${currentDefFileName.part0}.cls" />
        <java classname="com.financialforce.apexmocks.ApexMockGenerator">
            <classpath>
                <pathelement location="${lib.dir}/apex-mocks-generator-4.0.1.jar"/>
            </classpath>
            <arg value="${main.src.dir}/classes"/>
            <arg value="${mock.property.filename}"/>
            <arg value="${currentDefFileName.part0}"/>
            <arg value="${main.src.dir}/classes"/>
                <arg value="41.0"/>
        </java>
    </target>

    <target name="prepare-main-code-deployment">
        <delete dir="${deployment.root.dir}" failonerror="false"/>
        <mkdir dir="${deployment.root.dir}"/>

        <!-- copy all primary files -->
        <copy todir="${deployment.root.dir}">
            <fileset dir="${main.src.dir}"/>
        </copy>

        <!--
        <antcall target="temporarily-adjust-orgwide-email-address" >
            <param name="the-working-directory" value="${deployment.root.dir}"/>
        </antcall>
        -->
        <antcall target="remove-userPreferences-from-profiles" >
            <param name="the-working-directory" value="${deployment.root.dir}"/>
        </antcall>

        <antcall target="remove-unfiled-public-reference-from-package-xml" >
            <param name="the-working-directory" value="${deployment.root.dir}"/>
        </antcall>

        <antcall target="remove-litifyPM-managed-pacakge-dependencies">
            <param name="the-working-directory" value="${deployment.root.dir}"/>
        </antcall>

        <!--
        <antcall target="prepare-flows-for-deployment">
            <param name="the-working-directory" value="${deployment.root.dir}"/>
        </antcall>
        -->
        <antcall target="remove-exceptions" >
            <param name="working.base.dir" value="${deployment.root.dir}"/>
        </antcall>

    </target>

    <target name="prepare-flows-for-deployment">

        <mkdir dir="${the-working-directory}/flows"/>

        <antcall target="setup-active-flows"/>
        <antcall target="setup-inactive-flows"/>

        <!-- add the entry to the build target package.xml for Flow -->
        <replaceregexp flags="g">
            <regexp pattern="&lt;name&gt;EmailTemplate&lt;/name&gt;(\s*)&lt;/types&gt;(\s*)&lt;types&gt;(\s*)"/>
            <substitution expression="&lt;name&gt;EmailTemplate&lt;/name&gt;\1&lt;/types&gt;\1&lt;types&gt;\3&lt;members&gt;\*&lt;/members&gt;\3&lt;name&gt;Flow&lt;/name&gt;\1&lt;/types&gt;\1&lt;types&gt;\3"/>
            <fileset dir="${the-working-directory}">
                  <include name="package.xml"/>
            </fileset>
        </replaceregexp>
        <!--
        <antcall target="setup-flow-definitions"/>
        -->
    </target>

    <target name="prepare-to-activate-all-flows-from-source-in-target">
        <delete dir="${flow-definitions.working.dir}" failonerror="false"/>
        <mkdir dir="${flow-definitions.working.dir}"/>

        <!-- work with only the flows that have an active version -->
        <fileset id="matches" dir="${flows-src.dir}/flowDefinitions">
            <patternset id="files">
                <include name="*.flowDefinition" />
            </patternset>
            <contains text="activeVersionNumber" />
        </fileset>

        <copy todir="${flow-definitions.working.dir}/flowDefinitions">
            <fileset refid="matches"/>
        </copy>

        <antcall target="create-package-xml-with-flowDefinitions">
            <param name="working.base.dir" value="${flow-definitions.working.dir}"/>
        </antcall>

        <antcall target="remove-exceptions" >
            <param name="working.base.dir" value="${flow-definitions.working.dir}"/>
        </antcall>
    </target>

    <target name="remove-exceptions">
        <!-- exceptions -->
        <delete file="${working.base.dir}/flows/SS_Intake_Case_Questions_New_Flow-5.flow"/>
        <delete file="${working.base.dir}/flowDefinitions/SS_Intake_Case_Questions_New_Flow.flowDefinition"/>

        <delete file="${working.base.dir}/flows/SS_Questionnarie-6.flow"/>
        <delete file="${working.base.dir}/flowDefinitions/SS_Questionnarie.flowDefinition"/>

        <!--
        <delete file="${working.base.dir}/flows/Case_Qualify_Criteria_Check_TD_Questions-7.flow"/>
        <delete file="${working.base.dir}/flowDefinitions/Case_Qualify_Criteria_Check_TD_Questions.flowDefinition"/>

        <delete file="${working.base.dir}/flows/SS_Intake-5.flow"/>
        <delete file="${working.base.dir}/flowDefinitions/SS_Intake.flowDefinition"/>
        <delete file="${working.base.dir}/flows/Intake_Creator-17.flow"/>
        <delete file="${working.base.dir}/flowDefinitions/Intake_Creator.flowDefinition"/>
        <delete file="${working.base.dir}/flows/Case_Qualify_Criteria_Check_TD_Questions_Return_to_TD-23.flow"/>
        <delete file="${working.base.dir}/flowDefinitions/Case_Qualify_Criteria_Check_TD_Questions_Return_to_TD.flowDefinition"/>
        <delete file="${working.base.dir}/flows/Contact_Information_Capture-11.flow"/>
        <delete file="${working.base.dir}/flows/Case_Type_Controller-48.flow"/>
        -->
    </target>

    <target name="remove-userPreferences-from-profiles" description="quickly remove the userPreference tags so that it conflicts between orgs don't occur">
        <if>
            <available file="${the-working-directory}/profiles" type="dir"/>
            <then>
                <replaceregexp flags="gm">
                    <regexp pattern="&lt;userPermissions&gt;\s*&lt;enabled&gt;\S*&lt;/enabled&gt;\s*&lt;name&gt;\S*&lt;/name&gt;\s*&lt;/userPermissions&gt;\s*"/>
                    <substitution expression=""/>
                    <fileset dir="${the-working-directory}/profiles">
                        <include name="*.profile"/>
                    </fileset>
                </replaceregexp>
            </then>
        </if>
    </target>

    <target name="remove-litifyPM-managed-pacakge-dependencies" description="scans all classes, vf components, vf pages, and triggers and then removes the dependency on LitifyPM managed package">
        <replaceregexp flags="gm">
            <regexp pattern="&lt;packageVersions&gt;\n\s*&lt;majorNumber&gt;\S*&lt;\/majorNumber&gt;\n\s*&lt;minorNumber&gt;\S*&lt;\/minorNumber&gt;\n\s*&lt;namespace&gt;litify_pm&lt;\/namespace&gt;\n\s*&lt;\/packageVersions&gt;\n\s*"/>
            <substitution expression=""/>
            <fileset dir="${the-working-directory}/classes">
                <include name="*.cls-meta.xml"/>
            </fileset>
            <fileset dir="${the-working-directory}/components">
                <include name="*.component-meta.xml"/>
            </fileset>
            <fileset dir="${the-working-directory}/pages">
                <include name="*.page-meta.xml"/>
            </fileset>
            <fileset dir="${the-working-directory}/triggers">
                <include name="*.trigger-meta.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="remove-unfiled-public-reference-from-package-xml" description="quickly removes the unfiled$public reference in the package.xml in the EmailTemplate section.  It is not needed and prevents deployment to other environments.">
        <replaceregexp flags="gm">
            <!-- <members>unfiled$public</members> -->
            <regexp pattern="&lt;members&gt;unfiled\$public&lt;/members&gt;\s*"/>
            <substitution expression=""/>
            <fileset dir="${the-working-directory}">
                <include name="package.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="retrieve-src" description="Retrieve All Source Except Flows">

        <move file="${main.src.dir}/package.xml" tofile="${basedir}/package.xml" />
        <delete dir="${main.src.dir}" failonerror="true"/>
        <mkdir dir="${main.src.dir}"/>
        <move file="${basedir}/package.xml" tofile="${main.src.dir}/package.xml" />

        <antcall target="abstract-retrieve-source">
            <param name="working.base.dir" value="${main.src.dir}"/>
        </antcall>
    </target>

    <target name="retrieve-src-flows" description="Retrieve All Flows">
        <move file="${flows-src.dir}/package.xml" tofile="${basedir}/package.xml" />
        <delete dir="${flows-src.dir}" failonerror="true"/>
        <mkdir dir="${flows-src.dir}"/>
        <move file="${basedir}/package.xml" tofile="${flows-src.dir}/package.xml" />

        <antcall target="abstract-retrieve-source">
            <param name="working.base.dir" value="${flows-src.dir}"/>
        </antcall>
    </target>

    <target name="setup-active-flows">

        <delete dir="${flows.working.dir}" failonerror="false"/>
        <mkdir dir="${flows.working.dir}"/>

        <!-- work with only the flows that have an active version -->
        <fileset id="matches" dir="${flows-src.dir}/flowDefinitions">
            <patternset id="files">
                <include name="*.flowDefinition" />
            </patternset>
            <contains text="activeVersionNumber" />
        </fileset>

        <copy todir="${flows.working.dir}">
            <fileset refid="matches"/>
        </copy>

        <!-- determine which files to work with -->
        <path id="working.files.ref">
            <fileset id="workingfiles" dir="${flows.working.dir}">
                <patternset id="files">
                    <include name="*.flowDefinition" />
                </patternset>
            </fileset>
        </path>

        <!-- Add only the active flows -->
        <for param="flowFile">
            <path refid="working.files.ref"/>
            <sequential>
                <!--
                <echo message="@{flowFile}"/>
                -->
                <propertyregex property="name-of-file"
                            input="@{flowFile}"
                            regexp="${flows.working.dir}/([^\.]*)(.flowDefinition)"
                            select="\1"
                            override="true"
                            casesensitive="false" />
                <!--
                <echo message="${name-of-file}"/>
                -->

                <loadfile property="working-flow-metadata" srcFile="@{flowFile}">
                    <filterchain>
                       <expandproperties/>
                    </filterchain>
                </loadfile>
                <!--
                <echo message="${working-flow-metadata}"/>
                -->
                <propertyregex property="active-version-number-for-flow"
                            input="${working-flow-metadata}"
                            regexp="&lt;activeVersionNumber&gt;([^\.]*)&lt;/activeVersionNumber&gt;"
                            select="\1"
                            override="true"
                            casesensitive="false" />
                <!--
                <echo message="${active-version-number-for-flow}"/>
                <echo message=""/>
                <echo message="${name-of-file}-${active-version-number-for-flow}"/>
                -->
                <copy file="${flows-src.dir}/flows/${name-of-file}-${active-version-number-for-flow}.flow"
                       todir="${deployment.root.dir}/flows"/>
                <!--
                <echo message=""/>
                <echo message="____________________________________________________________"/>
                -->
                <var name="working-flow-metadata" unset="true"/>

            </sequential>
        </for>

    </target>

    <target name="setup-flow-definitions">
        <!-- copy oall of the FlowDefinition files -->
        <copy todir="${deployment.root.dir}/flowDefinitions">
            <fileset dir="${flows-src.dir}/flowDefinitions"/>
        </copy>

        <!-- add the entry to the build target package.xml for FlowDefinition -->
        <replaceregexp flags="g">
            <regexp pattern="&lt;name&gt;Flow&lt;/name&gt;(\s*)&lt;/types&gt;(\s*)&lt;types&gt;(\s*)"/>
            <substitution expression="&lt;name&gt;EmailTemplate&lt;/name&gt;\1&lt;/types&gt;\1&lt;types&gt;\3&lt;members&gt;\*&lt;/members&gt;\3&lt;name&gt;FlowDefinition&lt;/name&gt;\1&lt;/types&gt;\1&lt;types&gt;\3"/>
            <fileset dir="${deployment.root.dir}">
                  <include name="package.xml"/>
            </fileset>
        </replaceregexp>

    </target>

    <target name="setup-inactive-flows">

        <delete dir="${flows.working.dir}" failonerror="false"/>
        <mkdir dir="${flows.working.dir}"/>

        <!-- work with only the flows that have an active version -->
        <fileset id="matches" dir="${flows-src.dir}/flowDefinitions">
            <patternset id="files">
                <include name="*.flowDefinition" />
            </patternset>
            <not>
                <contains text="activeVersionNumber" />
            </not>
        </fileset>

        <copy todir="${flows.working.dir}">
            <fileset refid="matches"/>
        </copy>

        <!-- determine which files to work with -->
        <path id="working.files.ref">
            <fileset id="workingfiles" dir="${flows.working.dir}">
                <patternset id="files">
                    <include name="*.flowDefinition" />
                </patternset>
            </fileset>
        </path>


        <for param="flowFile">
            <path refid="working.files.ref"/>
            <sequential>
                <!--
                <echo message="flowFile == @{flowFile}"/>
                -->
                <propertyregex property="name-of-file"
                            input="@{flowFile}"
                            regexp="${flows.working.dir}/([^\.]*)(.flowDefinition)"
                            select="\1"
                            override="true"
                            casesensitive="false" />
                <!--
                <echo message="name-of-file == ${name-of-file}"/>
                -->
                <path id="flow-versions-available.ref">
                    <fileset id="flow-versions-available.workingfiles" dir="${flows-src.dir}/flows">
                        <patternset id="files">
                            <include name="${name-of-file}*.flow" />
                        </patternset>
                    </fileset>
                </path>

                <resourcecount property="flow.version.count">
                    <path refid="flow-versions-available.ref"/>
                </resourcecount>

                <var name="flow.version.to.work.with" value="0" />

                <for param="flowVersionAvailableFile">
                    <path refid="flow-versions-available.ref"/>
                    <sequential>
                        <!--
                        <echo message="flowVersionAvailableFile == @{flowVersionAvailableFile}" />
                        -->
                        <propertyregex property="current-version-of-flow"
                           input="@{flowVersionAvailableFile}"
                           regexp="${flows-src.dir}/flows/${name-of-file}-([^\.]*)(.flow)"
                            select="\1"
                            override="true"
                          />

                        <script language="javascript">
                            <![CDATA[
                              var currentVersion = parseInt(project.getProperty('current-version-of-flow'));
                              var flowVersionToWorkWith = parseInt(project.getProperty('flow.version.to.work.with'));
                              project.setProperty('isGreater', currentVersion > flowVersionToWorkWith);
                            ]]>
                        </script>
                        <!--
                        <echo message="isGreater = ${isGreater}" />
                        -->
                        <if>
                            <equals arg1="${isGreater}" arg2="true" />
                            <then>
                                <!--
                                <echo>${current-version-of-flow} is greater than ${flow.version.to.work.with}</echo>
                                -->
                                <var name="flow.version.to.work.with" value="${current-version-of-flow}" />
                            </then>
                        </if>
                        <!--
                        <echo message="current-version-of-flow == ${current-version-of-flow}" />
                        <echo message="flow.version.to.work.with == ${flow.version.to.work.with}" />
                        <echo message=""/>
                        <echo message="____________"/>
                        <echo message=""/>
                        -->
                    </sequential>
                </for>
                <!--
                <echo message="flow.version.to.work.with == ${flow.version.to.work.with}" />
                -->
                <copy file="${flows-src.dir}/flows/${name-of-file}-${flow.version.to.work.with}.flow"
                       todir="${deployment.root.dir}/flows"/>
                <!--
                <echo message=""/>
                <echo message=""/>
                <echo message="____________________________________________________________"/>
                <echo message=""/>
                <echo message=""/>
                -->
                <var name="name-of-file" unset="true"/>
                <var name="flow-versions-available" unset="true"/>

            </sequential>
        </for>
    </target>

    <target name="temporarily-adjust-orgwide-email-address">

        <replaceregexp flags="gm">
            <regexp pattern="investigations@forthepeople.com"/>
            <substitution expression="${org.wide.email.address}"/>
            <fileset dir="${the-working-directory}/workflows">
                  <include name="*.workflow"/>
            </fileset>
        </replaceregexp>
        <replaceregexp flags="gm">
            <regexp pattern="johnbmorgan@forthepeople.com"/>
            <substitution expression="${org.wide.email.address}"/>
            <fileset dir="${the-working-directory}/workflows">
                <include name="*.workflow"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="undeploy-obsolete" description="Undeploys metadata from the src-metadata-deletes folder.">

        <antcall target="abstract-deploy-source">
            <param name="working.base.dir" value="${destructive-changes-folder-name}" />
            <param name="ignore.warnings" value="true" />
            <param name="testLevel" value="RunLocalTests"/>
        </antcall>

    </target>

    <target name="validate-undeploy-obsolete" description="Validates the undeploy of metadata from the src-metadata-deletes folder.">

        <antcall target="abstract-validate-source">
            <param name="working.base.dir" value="${destructive-changes-folder-name}" />
            <param name="ignore.warnings" value="true" />
            <param name="testLevel" value="RunLocalTests"/>
        </antcall>

    </target>

    <target name="validate-deploy-src" description="Deploys the reports and dashbaords from the src package">
        <antcall target="abstract-validate-source">
            <param name="working.base.dir" value="${main.src.dir}" />
            <param name="testLevel" value="RunLocalTests" />
            <!-- NoTestRun, RunSpecifiedTests, RunLocalTests, RunAllTestsInOrg -->

        </antcall>
    </target>

    <target name="validate-deploy-src-runspecifiedtests" description="Deploys the reports and dashbaords from the src package">
        <sf:deploy username="${sf.source.username}" password="${sf.source.password}${sf.source.securityToken}" serverurl="${sf.source.serverurl}"
            singlePackage="true"
            deployRoot="${main.src.dir}"
            checkOnly="true"
            ignoreWarnings="true"
            pollWaitMillis="10000" maxPoll="2000"
            testLevel="RunSpecifiedTests"
        >
            <runTest>ParentSortingServiceTest</runTest>
            <runTest>RecusalTriggerHandlerTest</runTest>
            <runTest>ReviewRecusalExtensionTest</runTest>
        </sf:deploy>
    </target>

    <target name="validate-deploy-main-code-to-target" description="Validates the deployment of code base in /src and /src-flows directory">

        <antcall target="prepare-main-code-deployment" />

        <antcall target="abstract-validate-target">
            <param name="working.base.dir" value="${deployment.root.dir}" />
        </antcall>

    </target>

    <target name="uat-deploy" description="Varation of deploy-main-code-to-target tailored for UAT deployments">
        <antcall target="deploy-main-code-to-target">
            <param name="testLevel" value="RunLocalTests"/>
        </antcall>
    </target>

    <target name="ci" description="Continous integration builds target">
        <antcall target="validate-deploy-main-code-to-target">
            <param name="testLevel" value="RunLocalTests"/>
        </antcall>
    </target>

    <target name="validate-deploy-flows-only-to-target" description="Validates the deployment of code base in /src and /src-flows directory">

        <delete dir="${deployment.root.dir}" failonerror="false"/>
        <mkdir dir="${deployment.root.dir}"/>

        <antcall target="create-package-xml-with-flows">
            <param name="working.base.dir" value="${deployment.root.dir}"/>
        </antcall>

        <antcall target="prepare-flows-for-deployment" >
            <param name="the-working-directory" value="${deployment.root.dir}"/>
        </antcall>

        <antcall target="abstract-validate-target">
            <param name="working.base.dir" value="${deployment.root.dir}" />
        </antcall>

    </target>

    <target name="validate-the-activation-of-all-flows-from-source-in-target">

        <antcall target="prepare-to-activate-all-flows-from-source-in-target"/>

        <!-- validate these flowDefinitions back to the target org -->
        <antcall target="abstract-validate-target">
            <param name="working.base.dir" value="${flow-definitions.working.dir}"/>
        </antcall>

    </target>

    <target name="scratch">

        <property name="current-x" value="0014"/>

        <script language="javascript">
            <![CDATA[
              var version = parseInt(project.getProperty('current-x'));
              project.setProperty('isGreater', version > 10);
            ]]>
        </script>

        <echo message="${isGreater}"/>

    </target>

    <target name="package-resource-bundle-contactsearch" description="Target is used to assemble changes from the resource-bundles/ContactSearch.resource folder back to a static resource.">
        <zip basedir="${resource-bundle.src.dir}/ContactSearch.resource" destFile="${main.src.dir}/staticresources/ContactSearch.resource" />
    </target>

    <target name="unpack-resource-bundle-contactsearch" description="Target is used to disassemble the ContactSearch static resource to the resource-bundles/ContactSearch.resource folder.">
        <unzip src="${main.src.dir}/staticresources/ContactSearch.resource" dest="${resource-bundle.src.dir}/ContactSearch.resource" />
    </target>

    <target name="package-resource-bundle-morgan" description="Target is used to assemble changes from the resource-bundles/Morgan.resource folder back to a static resource.">
        <zip basedir="${resource-bundle.src.dir}/Morgan.resource" destFile="${main.src.dir}/staticresources/Morgan.resource" />
    </target>

    <target name="unpack-resource-bundle-morgan" description="Target is used to disassemble the Morgan static resource to the resource-bundles/Morgan.resource folder.">
        <unzip src="${main.src.dir}/staticresources/Morgan.resource" dest="${resource-bundle.src.dir}/Morgan.resource" />
    </target>

    <target name="package-resource-bundle-mmsysadmin" description="Target is used to assemble changes from the resource-bundles/mmsysadmin.resource folder back to a static resource.">
        <zip basedir="${resource-bundle.src.dir}/mmsysadmin.resource" destFile="${main.src.dir}/staticresources/mmsysadmin.resource" />
    </target>

    <target name="unpack-resource-bundle-mmsysadmin" description="Target is used to disassemble the mmsysadmin static resource to the resource-bundles/mmsysadmin.resource folder.">
        <unzip src="${main.src.dir}/staticresources/mmsysadmin.resource" dest="${resource-bundle.src.dir}/mmsysadmin.resource" />
    </target>

</project>